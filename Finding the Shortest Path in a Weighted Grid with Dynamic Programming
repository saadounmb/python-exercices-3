def min_path_weight(grid):
    # Get the dimensions of the grid
    rows, cols = len(grid), len(grid[0])
    
    # Initialize a DP table where dp[i][j] holds the minimum path sum to (i, j)
    dp = [[0] * cols for _ in range(rows)]
    
    # Base case: starting point
    dp[0][0] = grid[0][0]
    
    # Fill the first row (only one direction to move: right)
    for j in range(1, cols):
        dp[0][j] = dp[0][j-1] + grid[0][j]
    
    # Fill the first column (only one direction to move: down)
    for i in range(1, rows):
        dp[i][0] = dp[i-1][0] + grid[i][0]
    
    # Fill the rest of the grid (can move either right or down)
    for i in range(1, rows):
        for j in range(1, cols):
            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]
    
    # The bottom-right corner holds the result
    return dp[rows-1][cols-1]

# Optimized Version (using a 1D array)
def min_path_weight_optimized(grid):
    rows, cols = len(grid), len(grid[0])
    
    # Initialize a 1D dp array for the first row
    dp = [0] * cols
    dp[0] = grid[0][0]
    
    # Fill the first row
    for j in range(1, cols):
        dp[j] = dp[j-1] + grid[0][j]
    
    # Update the dp array for the rest of the grid
    for i in range(1, rows):
        dp[0] += grid[i][0]  # Update the first column
        for j in range(1, cols):
            dp[j] = min(dp[j], dp[j-1]) + grid[i][j]
    
    # The result is in the last element of dp array
    return dp[cols-1]

# ðŸ§ª Example Usage
grid = [
    [1, 3, 1],
    [1, 5, 1],
    [4, 2, 1]
]

print(min_path_weight(grid))  # Output: 7
print(min_path_weight_optimized(grid))  # Output: 7
