import random
from collections import deque

class Maze:
    def __init__(self, width, height):
        # Maze dimensions should be odd
        self.width = width if width % 2 == 1 else width + 1
        self.height = height if height % 2 == 1 else height + 1
        self.maze = [['#' for _ in range(self.width)] for _ in range(self.height)]
        self.start = (1, 1)
        self.end = (self.height - 2, self.width - 2)

    def generate_maze(self):
        def carve_passages(x, y):
            directions = [(0, -2), (0, 2), (-2, 0), (2, 0)]
            random.shuffle(directions)
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 1 <= nx < self.height - 1 and 1 <= ny < self.width - 1:
                    if self.maze[nx][ny] == '#':
                        self.maze[nx][ny] = ' '
                        self.maze[x + dx // 2][y + dy // 2] = ' '
                        carve_passages(nx, ny)

        # Set start and end points
        self.maze[self.start[0]][self.start[1]] = ' '
        self.maze[self.end[0]][self.end[1]] = ' '
        carve_passages(self.start[0], self.start[1])

    def solve_maze(self):
        queue = deque()
        queue.append((self.start, [self.start]))
        visited = set()

        while queue:
            (x, y), path = queue.popleft()
            if (x, y) == self.end:
                return path
            visited.add((x, y))
            for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]:
                nx, ny = x + dx, y + dy
                if (0 <= nx < self.height and 0 <= ny < self.width and
                    self.maze[nx][ny] == ' ' and (nx, ny) not in visited):
                    queue.append(((nx, ny), path + [(nx, ny)]))
        return None

    def print_maze(self, path=None):
        display = [row[:] for row in self.maze]  # Copy
        if path:
            for x, y in path:
                if (x, y) != self.start and (x, y) != self.end:
                    display[x][y] = '.'
        display[self.start[0]][self.start[1]] = 'S'
        display[self.end[0]][self.end[1]] = 'E'

        for row in display:
            print(''.join(row))

# -------------------------------
# 🎮 Run the Maze Game

if __name__ == "__main__":
    maze = Maze(width=21, height=15)
    maze.generate_maze()
    solution = maze.solve_maze()

    if solution:
        print("✅ Maze Solved! Here's the path:")
        maze.print_maze(path=solution)
    else:
        print("❌ No path found.")
