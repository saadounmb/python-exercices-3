from typing import List
from collections import defaultdict, deque

def alien_order(words: List[str]) -> str:
    # Step 1: Build graph and in-degree map
    graph = defaultdict(set)
    in_degree = {char: 0 for word in words for char in word}

    # Step 2: Add edges between characters
    for i in range(len(words) - 1):
        word1, word2 = words[i], words[i + 1]
        min_len = min(len(word1), len(word2))
        
        # Edge case: prefix issue (e.g., ["abc", "ab"]) is invalid
        if word1[:min_len] == word2[:min_len] and len(word1) > len(word2):
            return "Invalid"
        
        for j in range(min_len):
            if word1[j] != word2[j]:
                if word2[j] not in graph[word1[j]]:
                    graph[word1[j]].add(word2[j])
                    in_degree[word2[j]] += 1
                break

    # Step 3: Topological Sort using Kahn's Algorithm
    queue = deque([char for char in in_degree if in_degree[char] == 0])
    result = []

    while queue:
        char = queue.popleft()
        result.append(char)

        for neighbor in graph[char]:
            in_degree[neighbor] -= 1
            if in_degree[neighbor] == 0:
                queue.append(neighbor)

    # Step 4: Check for cycle
    if len(result) < len(in_degree):
        return "Invalid"  # There is a cycle
    
    return ''.join(result)
